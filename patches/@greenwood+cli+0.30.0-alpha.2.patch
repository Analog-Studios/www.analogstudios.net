diff --git a/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-css.js b/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-css.js
index 64c1ba0..12fb4a2 100644
--- a/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-css.js
+++ b/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-css.js
@@ -50,23 +50,32 @@ function bundleCss(body, url, compilation) {
           barePath = barePath.replace('/', '');
         }
 
+        // TODO was this handling too naive? :|
         const locationUrl = barePath.startsWith('node_modules')
           ? new URL(`./${barePath}`, projectDirectory)
           : new URL(`./${barePath}`, userWorkspace);
-        const hash = hashString(fs.readFileSync(locationUrl, 'utf-8'));
-        const ext = barePath.split('.').pop();
-        const hashedRoot = barePath.replace(`.${ext}`, `.${hash}.${ext}`);
 
-        fs.mkdirSync(normalizePathnameForWindows(new URL(`./${path.dirname(barePath)}/`, outputDir)), {
-          recursive: true
-        });
+        if (fs.existsSync(locationUrl.pathname)) {
+          const hash = hashString(fs.readFileSync(locationUrl, 'utf-8'));
+          const ext = barePath.split('.').pop();
+          const hashedRoot = barePath.replace(`.${ext}`, `.${hash}.${ext}`);
   
-        fs.promises.copyFile(
-          locationUrl,
-          new URL(`./${hashedRoot}`, outputDir)
-        );
+          fs.mkdirSync(normalizePathnameForWindows(new URL(`./${path.dirname(barePath)}/`, outputDir)), {
+            recursive: true
+          });
+  
+          fs.promises.copyFile(
+            locationUrl,
+            new URL(`./${hashedRoot}`, outputDir)
+          );
+  
+          optimizedCss += `url('${basePath}${hashedRoot}')`;         
+        } else {
+          // TODO handle  'data:', e.g.  Unable to optimize /Users/owenbuckley/Workspace/analogstudiosri/www.analogstudios.net/src/data:image/svg+xml;charset=utf8,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%204%204'%3E%3Cpath%20stroke='%23fff'%20d='M0%202h4'/%3E%3C/svg%3E.
+          console.warn(`Unable to optimize ${locationUrl.pathname}.  You may need to manually copy this file into the output directory.`);
+          optimizedCss += `url('${value}')`;
+        }
  
-        optimizedCss += `url('${basePath}${hashedRoot}')`;
       } else if (type === 'Atrule' && name !== 'import') {
         optimizedCss += `@${name} `;
       } else if (type === 'TypeSelector') {
@@ -291,6 +300,7 @@ class StandardCssResource extends ResourceInterface {
 
   async optimize(url, response) {
     const body = await response.text();
+    console.log('CSS Optimize', { url, body });
     const optimizedBody = bundleCss(body, url, this.compilation);
 
     return new Response(optimizedBody);
